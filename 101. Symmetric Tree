Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 

Example 1:


Input: root = [1,2,2,3,4,4,3]
Output: true
Example 2:


Input: root = [1,2,2,null,3,null,3]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100

Sol:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
  def isSymmetric(self, root: Optional[TreeNode]) -> bool:
    def isSymmetric(leftTree: Optional[TreeNode], rightTree: Optional[TreeNode]) -> bool:
      if not leftTree or not rightTree:
        return leftTree == rightTree

      return leftTree.val == rightTree.val and isSymmetric(leftTree.left, rightTree.right) and isSymmetric(leftTree.right, rightTree.left)

    return isSymmetric(root, root)